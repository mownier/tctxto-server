// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicTacToeClient is the client API for TicTacToe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicTacToeClient interface {
	Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TicTacToe_SubscribeClient, error)
	Notify(ctx context.Context, in *ClientUpdate, opts ...grpc.CallOption) (*Empty, error)
	SubscribeBiDir(ctx context.Context, opts ...grpc.CallOption) (TicTacToe_SubscribeBiDirClient, error)
}

type ticTacToeClient struct {
	cc grpc.ClientConnInterface
}

func NewTicTacToeClient(cc grpc.ClientConnInterface) TicTacToeClient {
	return &ticTacToeClient{cc}
}

func (c *ticTacToeClient) Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TicTacToe_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicTacToe_ServiceDesc.Streams[0], "/server2.TicTacToe/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticTacToeSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TicTacToe_SubscribeClient interface {
	Recv() (*ServerUpdate, error)
	grpc.ClientStream
}

type ticTacToeSubscribeClient struct {
	grpc.ClientStream
}

func (x *ticTacToeSubscribeClient) Recv() (*ServerUpdate, error) {
	m := new(ServerUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticTacToeClient) Notify(ctx context.Context, in *ClientUpdate, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server2.TicTacToe/Notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeClient) SubscribeBiDir(ctx context.Context, opts ...grpc.CallOption) (TicTacToe_SubscribeBiDirClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicTacToe_ServiceDesc.Streams[1], "/server2.TicTacToe/SubscribeBiDir", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticTacToeSubscribeBiDirClient{stream}
	return x, nil
}

type TicTacToe_SubscribeBiDirClient interface {
	Send(*ClientUpdate) error
	Recv() (*ServerUpdate, error)
	grpc.ClientStream
}

type ticTacToeSubscribeBiDirClient struct {
	grpc.ClientStream
}

func (x *ticTacToeSubscribeBiDirClient) Send(m *ClientUpdate) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ticTacToeSubscribeBiDirClient) Recv() (*ServerUpdate, error) {
	m := new(ServerUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TicTacToeServer is the server API for TicTacToe service.
// All implementations must embed UnimplementedTicTacToeServer
// for forward compatibility
type TicTacToeServer interface {
	Subscribe(*Empty, TicTacToe_SubscribeServer) error
	Notify(context.Context, *ClientUpdate) (*Empty, error)
	SubscribeBiDir(TicTacToe_SubscribeBiDirServer) error
	mustEmbedUnimplementedTicTacToeServer()
}

// UnimplementedTicTacToeServer must be embedded to have forward compatible implementations.
type UnimplementedTicTacToeServer struct {
}

func (UnimplementedTicTacToeServer) Subscribe(*Empty, TicTacToe_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTicTacToeServer) Notify(context.Context, *ClientUpdate) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedTicTacToeServer) SubscribeBiDir(TicTacToe_SubscribeBiDirServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBiDir not implemented")
}
func (UnimplementedTicTacToeServer) mustEmbedUnimplementedTicTacToeServer() {}

// UnsafeTicTacToeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicTacToeServer will
// result in compilation errors.
type UnsafeTicTacToeServer interface {
	mustEmbedUnimplementedTicTacToeServer()
}

func RegisterTicTacToeServer(s grpc.ServiceRegistrar, srv TicTacToeServer) {
	s.RegisterService(&TicTacToe_ServiceDesc, srv)
}

func _TicTacToe_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicTacToeServer).Subscribe(m, &ticTacToeSubscribeServer{stream})
}

type TicTacToe_SubscribeServer interface {
	Send(*ServerUpdate) error
	grpc.ServerStream
}

type ticTacToeSubscribeServer struct {
	grpc.ServerStream
}

func (x *ticTacToeSubscribeServer) Send(m *ServerUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _TicTacToe_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server2.TicTacToe/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).Notify(ctx, req.(*ClientUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToe_SubscribeBiDir_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TicTacToeServer).SubscribeBiDir(&ticTacToeSubscribeBiDirServer{stream})
}

type TicTacToe_SubscribeBiDirServer interface {
	Send(*ServerUpdate) error
	Recv() (*ClientUpdate, error)
	grpc.ServerStream
}

type ticTacToeSubscribeBiDirServer struct {
	grpc.ServerStream
}

func (x *ticTacToeSubscribeBiDirServer) Send(m *ServerUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ticTacToeSubscribeBiDirServer) Recv() (*ClientUpdate, error) {
	m := new(ClientUpdate)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TicTacToe_ServiceDesc is the grpc.ServiceDesc for TicTacToe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicTacToe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server2.TicTacToe",
	HandlerType: (*TicTacToeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Notify",
			Handler:    _TicTacToe_Notify_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _TicTacToe_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBiDir",
			Handler:       _TicTacToe_SubscribeBiDir_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server2/tctxto2.proto",
}
