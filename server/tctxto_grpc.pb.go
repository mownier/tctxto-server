// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicTacToeClient is the client API for TicTacToe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicTacToeClient interface {
	Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeReply, error)
	Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TicTacToe_SubscribeClient, error)
	Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*Empty, error)
	Invalidate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*Empty, error)
	JoinLobby(ctx context.Context, in *JoinLobbyRequest, opts ...grpc.CallOption) (*Empty, error)
	LeaveMyLobby(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*Empty, error)
	MakeMove(ctx context.Context, in *MakeMoveRequest, opts ...grpc.CallOption) (*Empty, error)
}

type ticTacToeClient struct {
	cc grpc.ClientConnInterface
}

func NewTicTacToeClient(cc grpc.ClientConnInterface) TicTacToeClient {
	return &ticTacToeClient{cc}
}

func (c *ticTacToeClient) Exchange(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeReply, error) {
	out := new(ExchangeReply)
	err := c.cc.Invoke(ctx, "/server.TicTacToe/Exchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeClient) Subscribe(ctx context.Context, in *Empty, opts ...grpc.CallOption) (TicTacToe_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicTacToe_ServiceDesc.Streams[0], "/server.TicTacToe/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticTacToeSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TicTacToe_SubscribeClient interface {
	Recv() (*SubscriptionUpdate, error)
	grpc.ClientStream
}

type ticTacToeSubscribeClient struct {
	grpc.ClientStream
}

func (x *ticTacToeSubscribeClient) Recv() (*SubscriptionUpdate, error) {
	m := new(SubscriptionUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ticTacToeClient) Handshake(ctx context.Context, in *HandshakeRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.TicTacToe/Handshake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeClient) Invalidate(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.TicTacToe/Invalidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeClient) CreateLobby(ctx context.Context, in *CreateLobbyRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.TicTacToe/CreateLobby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeClient) JoinLobby(ctx context.Context, in *JoinLobbyRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.TicTacToe/JoinLobby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeClient) LeaveMyLobby(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.TicTacToe/LeaveMyLobby", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeClient) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.TicTacToe/CreateGame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ticTacToeClient) MakeMove(ctx context.Context, in *MakeMoveRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/server.TicTacToe/MakeMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TicTacToeServer is the server API for TicTacToe service.
// All implementations must embed UnimplementedTicTacToeServer
// for forward compatibility
type TicTacToeServer interface {
	Exchange(context.Context, *ExchangeRequest) (*ExchangeReply, error)
	Subscribe(*Empty, TicTacToe_SubscribeServer) error
	Handshake(context.Context, *HandshakeRequest) (*Empty, error)
	Invalidate(context.Context, *Empty) (*Empty, error)
	CreateLobby(context.Context, *CreateLobbyRequest) (*Empty, error)
	JoinLobby(context.Context, *JoinLobbyRequest) (*Empty, error)
	LeaveMyLobby(context.Context, *Empty) (*Empty, error)
	CreateGame(context.Context, *CreateGameRequest) (*Empty, error)
	MakeMove(context.Context, *MakeMoveRequest) (*Empty, error)
	mustEmbedUnimplementedTicTacToeServer()
}

// UnimplementedTicTacToeServer must be embedded to have forward compatible implementations.
type UnimplementedTicTacToeServer struct {
}

func (UnimplementedTicTacToeServer) Exchange(context.Context, *ExchangeRequest) (*ExchangeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exchange not implemented")
}
func (UnimplementedTicTacToeServer) Subscribe(*Empty, TicTacToe_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedTicTacToeServer) Handshake(context.Context, *HandshakeRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Handshake not implemented")
}
func (UnimplementedTicTacToeServer) Invalidate(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Invalidate not implemented")
}
func (UnimplementedTicTacToeServer) CreateLobby(context.Context, *CreateLobbyRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLobby not implemented")
}
func (UnimplementedTicTacToeServer) JoinLobby(context.Context, *JoinLobbyRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinLobby not implemented")
}
func (UnimplementedTicTacToeServer) LeaveMyLobby(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveMyLobby not implemented")
}
func (UnimplementedTicTacToeServer) CreateGame(context.Context, *CreateGameRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGame not implemented")
}
func (UnimplementedTicTacToeServer) MakeMove(context.Context, *MakeMoveRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeMove not implemented")
}
func (UnimplementedTicTacToeServer) mustEmbedUnimplementedTicTacToeServer() {}

// UnsafeTicTacToeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicTacToeServer will
// result in compilation errors.
type UnsafeTicTacToeServer interface {
	mustEmbedUnimplementedTicTacToeServer()
}

func RegisterTicTacToeServer(s grpc.ServiceRegistrar, srv TicTacToeServer) {
	s.RegisterService(&TicTacToe_ServiceDesc, srv)
}

func _TicTacToe_Exchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).Exchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TicTacToe/Exchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).Exchange(ctx, req.(*ExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToe_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TicTacToeServer).Subscribe(m, &ticTacToeSubscribeServer{stream})
}

type TicTacToe_SubscribeServer interface {
	Send(*SubscriptionUpdate) error
	grpc.ServerStream
}

type ticTacToeSubscribeServer struct {
	grpc.ServerStream
}

func (x *ticTacToeSubscribeServer) Send(m *SubscriptionUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _TicTacToe_Handshake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).Handshake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TicTacToe/Handshake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).Handshake(ctx, req.(*HandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToe_Invalidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).Invalidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TicTacToe/Invalidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).Invalidate(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToe_CreateLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).CreateLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TicTacToe/CreateLobby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).CreateLobby(ctx, req.(*CreateLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToe_JoinLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinLobbyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).JoinLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TicTacToe/JoinLobby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).JoinLobby(ctx, req.(*JoinLobbyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToe_LeaveMyLobby_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).LeaveMyLobby(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TicTacToe/LeaveMyLobby",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).LeaveMyLobby(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToe_CreateGame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).CreateGame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TicTacToe/CreateGame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).CreateGame(ctx, req.(*CreateGameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TicTacToe_MakeMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TicTacToeServer).MakeMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.TicTacToe/MakeMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TicTacToeServer).MakeMove(ctx, req.(*MakeMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TicTacToe_ServiceDesc is the grpc.ServiceDesc for TicTacToe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicTacToe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.TicTacToe",
	HandlerType: (*TicTacToeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exchange",
			Handler:    _TicTacToe_Exchange_Handler,
		},
		{
			MethodName: "Handshake",
			Handler:    _TicTacToe_Handshake_Handler,
		},
		{
			MethodName: "Invalidate",
			Handler:    _TicTacToe_Invalidate_Handler,
		},
		{
			MethodName: "CreateLobby",
			Handler:    _TicTacToe_CreateLobby_Handler,
		},
		{
			MethodName: "JoinLobby",
			Handler:    _TicTacToe_JoinLobby_Handler,
		},
		{
			MethodName: "LeaveMyLobby",
			Handler:    _TicTacToe_LeaveMyLobby_Handler,
		},
		{
			MethodName: "CreateGame",
			Handler:    _TicTacToe_CreateGame_Handler,
		},
		{
			MethodName: "MakeMove",
			Handler:    _TicTacToe_MakeMove_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _TicTacToe_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/tctxto.proto",
}
